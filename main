#RSW Scheduler

#Implement employee class
class employee(object):
    def __init__(self, lName, fName, initials, certs, cic = False):
        """
        initialize values for employee
        
        lName is (str) last name
        fName is (str) first name
        initials is (str) length 2
        certs is a (dict) with (str) keys of positions with (bool) values
        	these are the positions employee is certified on
        (OPTIONAL) cic is (bool), defaults to False
        """
        self.lName = lName
        self.fName = fName
        self.initials = intials
        self.certs = certs
        self.cic = cic
        #GOMER is employees signout time
        self.gomer = None
	
class facility(object):
    def __init__(self, positions, maxTOP = 105, minTOP = 30, opmTOP = 60,
    minBreak = 15, opmBreak = 30, shove = 15, close = False):
        """
    	initialize values for facility object
        here we set the facility parameters that will be used when making the schedule
        
    	positions (list) of (position) objects in facility
        maxTOP (int): we can set max time on position (maxTOP) to 1:45 (or 105 minutes)
	minTOP (int): we can set min time on position (minTOP) to 0:30 (30 minutes)
	opmTOP (int): we can set optimum time on position (opmTOP) to 1:00 (60 minutes)
	minBreak (int): we can set minimum breaks (minBreak) to be 0:15 (15 minutes)
	we won't set a maximum break time
	opmBreak(int): we can set optimum break time (opmBreak) to be 0:30 (30 minutes)
	shove (int): we can set shove time (shove) to be 0:15 (15 minutes)
	this is how long before the end of their shift an employee gets off position
        close is (int, bool) time facility closes in 24 hour local time.
        if 24hr facility leave blank, defaults to False    	
    	"""
	self.positions = positions
	self.maxTOP = maxTOP
	self.minTOP = minTOP
	self.opmTOP = opmTOP
	self.minBreak = minBreak
	self.opmBreak = opmBreak
	self.shove = shove
	self.close = close

    def getClose(self):
        return self.close    	



#create class for the schedule
class schedule(object):
    def __init__(self, numCorePos, numAuxPos, slotLen = 15):
    	"""
        initialize schedule class
        
        corePOS is (int) number of core positions to fill
        auxPOS is (int) number of ancillary positions to fill
        slotLen is (int) number of minutes per time slot.  Default is 15m
        """
    	self.numCorePos = numCorePos
        #this will be a list of corePos objects
        self.corePos = []
        self.numAuxPos = numAuxPos
        #this will be a list of auxPos objects
        self.auxPos = []
        self.close = close
        self.slotLen = slotLen
        
    def getCorePos(self):
        return self.corePos
    
    def getAuxPos(self):
        return self.auxPos
    
    def getSlotLen(self):
        return self.slotLen
        
    #function makePos will create 2 lists of position objects
    def makePos(self):
        for pos in xrange(self.numCorePos):
            corePos.append(position,"core")
        for pos in xrange(self.numAuxPos):
            auxPos.append(position,"aux")
            

#we can create an object class for each position so we can save its attributes
class position(object):
    def __init__(self, posType = None, posName = "No Name"):
        """
        initialize position object
        we can create one of these for each position we want to schedule
        
        posType is a (str), either "core" or "aux"
        core means it never closes and should always be a top level position
        aux means it may be opened with enough staffing
        
        posName is a (str), the name of the position
        this is compared to employees ratings to see if they're eligible to work the position
        """
        self.posType = posType
        self.posName = posName
        #initialize "combinedTo" to be None
        #each position can be combined to another by setting "combinedTo" to the position object
        #if "combinedTo" is None, this means it's the top level position
        self.combinedTo = None
        
    def getPosName(self):
        return self.posName
        
    def getPosType(self):
        return self.posType
    
    def getCombinedTo(self):
        return self.combinedTo
        
#now we need to find all the combinations...
