import random

#Implement Employee class
class Employee(object):
    def __init__(self, name):
        """
        initialize values for Employee
        
        name (str) is name of employee
        """
        self.name = name
        self.initials = name ##### WERE DOING THIS FOR SIMPLICITY's SAKE!!! CHANGE LATER!!! #####
        #we'll keep track of the last position employee worked to try and keep variety
        self.lastPosition = None

    def __str__(self):
        return self.name
        
    def getInitials(self):
        return self.initials
		
    def getLastPos(self):
        return self.lastPosition
        
    def setLastPos(self, lastPos):
        self.lastPosition = lastPos

#we can create an object class for each position so we can save its attributes
class Position(object):
    def __init__(self, posID = 'ID'):
        """
        initialize Position object
        we can create one of these for each position we want to schedule
        
        posID (str) is the coded id of the position
        e.g. East = EST, Local Control = LC
        """
        self.posID = posID
        self.schedule = Schedule(1800,2400)
        
    def __str__(self):
    	return self.posID
    	
    def getPosID(self):
        return self.posID
    	
    ##### WORK IN PROGRESS #####
    def assignWorker(self, slot, person):
    	self.schedule.addSomething(slot, person)
    	
    def getSlotList(self):
    	return self.schedule.getSlotList()
    	
    def getSlotSize(self):
    	return self.schedule.getSlotSize()
        
#create class for the schedule
class Schedule(object):
    def __init__(self, begin, end, slotSize = 15):
        """
        take a beginning time and end time to create a dictionary with slots of size slotSize
        
        begin (int) is a 24hr 4 digit time e.g. 2359
        end (int) is also a 24hr 4 digit time
        slotSize (int) is the length in minutes you want each time slot to be
        """
        self.slotSize = slotSize
        slot = begin
        #we're creating a dictionary of slots for keys and objects for values
        #we also create a list of the slot times
        self.slots = {}
        self.slotList = []
        while slot < end:
            if slot % 100 < 60:
                self.slots[slot] = None
                self.slotList.append(slot)
                #slots with be filled with a Position object, a list of Employee objects, or a single Employee object
            else:
                slot += 40
                self.slots[slot] = None
                self.slotList.append(slot)
                #slots with be filled with a Position object, a list of Employee objects, or a single Employee object
            slot += slotSize
            
    def addSomething(self, slot, something):
    	self.slots[slot] = something
    	
    def getSlotList(self):
    	return self.slotList
    	
    def getSlotSize(self):
    	return self.slotSize

#implement Facility class
class Facility(object):
    def __init__(self, name, maxTOP = 105):
	    """
	    initialize values for Facility object
	    here we set the facility parameters that will be used when making the schedule
    
	    name (str): name of facility
	    
	    optional parameters...
	    maxTOP (int): we can set max time on position (maxTOP) to 1:45 (or 105 minutes)
    	"""
	    self.name = name
	    self.maxTOP = maxTOP
	
    	#positionList (list) of (Position) objects in facility
    	#postions (dict) of posID's for keys assigned to (Position) values
    	self.positionList = []
    	self.positions = {}
    	
    	#employeeList (list) of (Employee) objects in facility
    	#employees (dict) of employee initials for keys assigned to (Employee) values
    	self.employeeList = []
    	self.employees = {}
    	
    	#create dictionary of lists of employees on break (Schedule object) 
    	#create dictionary of lists of employees on position (Schedule object)
        self.onBreak = Schedule(1800,2400)
        self.onPos = Schedule(1800,2400)
    
    def addPosition(self, pos):
        self.positionList.append(pos)
        self.positions[pos.getPosID()] = pos
		
    def addEmployee(self, person):
        self.employeeList.append(person)
        self.employees[person.getInitials()] = person
		
    ##### WORK IN PROGRESS #####
    def makeSomeoneWork(self):
	#randomly pick a lucky worker to assign a position
	lucky = random.choice(self.employeeList)
	
	#list of positions minus the last position employee worked
	options = self.positionList[:]
	if type(lucky.getLastPos()) == Position:
	    options.remove(lucky.getLastPos())
	
	#randomly pick a position from the remaining positions
	pos = random.choice(options)
	
	#start assigning worker to position
	TOP = 0
	slotList = pos.getSlotList()[:]
	while TOP <= self.maxTOP:
            pos.assignWorker(slotList.pop(),lucky)
            TOP += pos.getSlotSize()
        lucky.setLastPos(pos)
        print lucky ##### TEST CODE. REMOVE FOR PRODUCTION #####
        print pos ##### TEST CODE. REMOVE FOR PRODUCTION #####
        
##### TEST CODE #####
RSW = Facility("Fort Myers")

RSW.addEmployee(Employee("Ricky"))
RSW.addEmployee(Employee("Noe"))
RSW.addEmployee(Employee("Ross"))
RSW.addEmployee(Employee("Cashdollar"))
RSW.addEmployee(Employee("Mo"))
RSW.addEmployee(Employee("Spanky"))

RSW.addPosition(Position("A"))
RSW.addPosition(Position("B"))
